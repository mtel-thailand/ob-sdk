"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * ob-bms
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParkingTicketsIndexTypeEnum = exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = exports.WrappedResponsePassConsentResponseDataStatusEnum = exports.WrappedResponseNullDataEnum = exports.ShowPassResponseStatusEnum = exports.ServiceRequestStatusInProgress = exports.ServiceRequestStatusDone = exports.ServiceRequestStatus = exports.SensorType = exports.PassDataStatusEnum = exports.PassConsentResponseStatusEnum = exports.ParkingTicketsIndexQueryTypeEnum = exports.ACRequestStatus = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
exports.ACRequestStatus = {
    Submitted: 'submitted',
    Rejected: 'rejected',
    Approved: 'approved'
};
exports.ParkingTicketsIndexQueryTypeEnum = {
    LogId: 'log_id',
    InviteId: 'invite_id',
    MemberId: 'member_id'
};
exports.PassConsentResponseStatusEnum = {
    Pending: 'pending',
    Confirmed: 'confirmed'
};
exports.PassDataStatusEnum = {
    Pending: 'pending',
    Confirmed: 'confirmed'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.SensorType = {
    Pm25: 'pm25',
    Pm10: 'pm10',
    Co2: 'co2',
    Temperature: 'temperature',
    Humidity: 'humidity'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.ServiceRequestStatus = {
    Submitted: 'submitted',
    InProgress: 'in_progress',
    Done: 'done'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.ServiceRequestStatusDone = {
    Done: 'done'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.ServiceRequestStatusInProgress = {
    InProgress: 'in_progress'
};
exports.ShowPassResponseStatusEnum = {
    Pending: 'pending',
    Confirmed: 'confirmed'
};
exports.WrappedResponseNullDataEnum = {
    NUMBER_null: null
};
exports.WrappedResponsePassConsentResponseDataStatusEnum = {
    Pending: 'pending',
    Confirmed: 'confirmed'
};
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {ACRequestBody} aCRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acRequestCreate: (aCRequestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'aCRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('acRequestCreate', 'aCRequestBody', aCRequestBody);
            const localVarPath = `/ac_request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(aCRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} [requesterId]
         * @param {string} [orderBy]
         * @param {string} [orderDirection]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {ACRequestStatus} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acRequestIndex: (requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/ac_request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (requesterId !== undefined) {
                localVarQueryParameter['requester_id'] = requesterId;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (orderDirection !== undefined) {
                localVarQueryParameter['order_direction'] = orderDirection;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acRequestShow: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('acRequestShow', 'id', id);
            const localVarPath = `/ac_request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} floorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acZonesShow: (floorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'floorId' is not null or undefined
            (0, common_1.assertParamExists)('acZonesShow', 'floorId', floorId);
            const localVarPath = `/ac_zones/{floor_id}`
                .replace(`{${"floor_id"}}`, encodeURIComponent(String(floorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {WebhookCreateBody} webhookCreateBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: (webhookCreateBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'webhookCreateBody' is not null or undefined
            (0, common_1.assertParamExists)('create', 'webhookCreateBody', webhookCreateBody);
            const localVarPath = `/integrations/fs/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(webhookCreateBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetch: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/integrations/fs/parking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {CreateFSMembersBody} createFSMembersBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationsFsMembersCreate: (createFSMembersBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'createFSMembersBody' is not null or undefined
            (0, common_1.assertParamExists)('integrationsFsMembersCreate', 'createFSMembersBody', createFSMembersBody);
            const localVarPath = `/integrations/fs/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createFSMembersBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {DestroyFSMembers} destroyFSMembers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationsFsMembersDelete: (destroyFSMembers, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'destroyFSMembers' is not null or undefined
            (0, common_1.assertParamExists)('integrationsFsMembersDelete', 'destroyFSMembers', destroyFSMembers);
            const localVarPath = `/integrations/fs/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(destroyFSMembers, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueTypesIndex: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/issue_types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsIndex: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} memberId
         * @param {CommandsCreateBody} commandsCreateBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersCommandsCreate: (memberId, commandsCreateBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'memberId' is not null or undefined
            (0, common_1.assertParamExists)('membersCommandsCreate', 'memberId', memberId);
            // verify required parameter 'commandsCreateBody' is not null or undefined
            (0, common_1.assertParamExists)('membersCommandsCreate', 'commandsCreateBody', commandsCreateBody);
            const localVarPath = `/members/{member_id}/commands`
                .replace(`{${"member_id"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(commandsCreateBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} memberId
         * @param {string} [name]
         * @param {string} [orderBy]
         * @param {string} [orderDirection]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersCommandsIndex: (memberId, name, orderBy, orderDirection, pageNumber, pageSize, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'memberId' is not null or undefined
            (0, common_1.assertParamExists)('membersCommandsIndex', 'memberId', memberId);
            const localVarPath = `/members/{member_id}/commands`
                .replace(`{${"member_id"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (orderDirection !== undefined) {
                localVarQueryParameter['order_direction'] = orderDirection;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} [identifier]
         * @param {string} [accountId]
         * @param {string} [xAccountId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersIndex: (identifier, accountId, xAccountId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }
            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }
            if (xAccountId != null) {
                localVarHeaderParameter['x-account-id'] = String(xAccountId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {string} [locationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersShow: (id, locationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('membersShow', 'id', id);
            const localVarPath = `/members/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {UpdateMemberRequestBody} updateMemberRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersUpdate: (id, updateMemberRequestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('membersUpdate', 'id', id);
            // verify required parameter 'updateMemberRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('membersUpdate', 'updateMemberRequestBody', updateMemberRequestBody);
            const localVarPath = `/members/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateMemberRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parkingLotsIndex: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/parking_lots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {number} memberTypeId
         * @param {number} vehicleTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parkingRedemptionRatesIndex: (id, memberTypeId, vehicleTypeId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('parkingRedemptionRatesIndex', 'id', id);
            // verify required parameter 'memberTypeId' is not null or undefined
            (0, common_1.assertParamExists)('parkingRedemptionRatesIndex', 'memberTypeId', memberTypeId);
            // verify required parameter 'vehicleTypeId' is not null or undefined
            (0, common_1.assertParamExists)('parkingRedemptionRatesIndex', 'vehicleTypeId', vehicleTypeId);
            const localVarPath = `/members/{id}/parking_redemption_rates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (memberTypeId !== undefined) {
                localVarQueryParameter['member_type_id'] = memberTypeId;
            }
            if (vehicleTypeId !== undefined) {
                localVarQueryParameter['vehicle_type_id'] = vehicleTypeId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {ParkingTicketsIndexTypeEnum} type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parkingTicketsIndex: (type, id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('parkingTicketsIndex', 'type', type);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('parkingTicketsIndex', 'id', id);
            const localVarPath = `/parking_tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} logId
         * @param {ParkingTicketsRedeemBody} parkingTicketsRedeemBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parkingTicketsRedeem: (logId, parkingTicketsRedeemBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'logId' is not null or undefined
            (0, common_1.assertParamExists)('parkingTicketsRedeem', 'logId', logId);
            // verify required parameter 'parkingTicketsRedeemBody' is not null or undefined
            (0, common_1.assertParamExists)('parkingTicketsRedeem', 'parkingTicketsRedeemBody', parkingTicketsRedeemBody);
            const localVarPath = `/parking_tickets/{log_id}/redeem`
                .replace(`{${"log_id"}}`, encodeURIComponent(String(logId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(parkingTicketsRedeemBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} visitScheduleId
         * @param {ConsentRequestBody} consentRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passesConsent: (visitScheduleId, consentRequestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'visitScheduleId' is not null or undefined
            (0, common_1.assertParamExists)('passesConsent', 'visitScheduleId', visitScheduleId);
            // verify required parameter 'consentRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('passesConsent', 'consentRequestBody', consentRequestBody);
            const localVarPath = `/passes/consent/{visit_schedule_id}`
                .replace(`{${"visit_schedule_id"}}`, encodeURIComponent(String(visitScheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(consentRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} visitScheduleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passesShow: (visitScheduleId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'visitScheduleId' is not null or undefined
            (0, common_1.assertParamExists)('passesShow', 'visitScheduleId', visitScheduleId);
            const localVarPath = `/passes/{visit_schedule_id}`
                .replace(`{${"visit_schedule_id"}}`, encodeURIComponent(String(visitScheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} towerId
         * @param {string} [memberId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsIndex: (towerId, memberId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'towerId' is not null or undefined
            (0, common_1.assertParamExists)('sensorsIndex', 'towerId', towerId);
            const localVarPath = `/sensors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (towerId !== undefined) {
                localVarQueryParameter['tower_id'] = towerId;
            }
            if (memberId !== undefined) {
                localVarQueryParameter['member_id'] = memberId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {ServiceRequestBody} serviceRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceRequestsCreate: (serviceRequestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'serviceRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('serviceRequestsCreate', 'serviceRequestBody', serviceRequestBody);
            const localVarPath = `/service_requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(serviceRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} [requesterId]
         * @param {string} [orderBy]
         * @param {string} [orderDirection]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {ServiceRequestStatus} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceRequestsIndex: (requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/service_requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (requesterId !== undefined) {
                localVarQueryParameter['requester_id'] = requesterId;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (orderDirection !== undefined) {
                localVarQueryParameter['order_direction'] = orderDirection;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceRequestsShow: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('serviceRequestsShow', 'id', id);
            const localVarPath = `/service_requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {ServiceRequestsUpdateRequestBody} serviceRequestsUpdateRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceRequestsUpdate: (id, serviceRequestsUpdateRequestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('serviceRequestsUpdate', 'id', id);
            // verify required parameter 'serviceRequestsUpdateRequestBody' is not null or undefined
            (0, common_1.assertParamExists)('serviceRequestsUpdate', 'serviceRequestsUpdateRequestBody', serviceRequestsUpdateRequestBody);
            const localVarPath = `/service_requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(serviceRequestsUpdateRequestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {SyncBody} syncBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sync: (syncBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'syncBody' is not null or undefined
            (0, common_1.assertParamExists)('sync', 'syncBody', syncBody);
            const localVarPath = `/integrations/fs/job/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(syncBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} [tokenId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitorTokensIndex: (tokenId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/visitor_tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (tokenId !== undefined) {
                localVarQueryParameter['token_id'] = tokenId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {CreateVisitorBody} createVisitorBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitorsCreate: (createVisitorBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'createVisitorBody' is not null or undefined
            (0, common_1.assertParamExists)('visitorsCreate', 'createVisitorBody', createVisitorBody);
            const localVarPath = `/visitors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createVisitorBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitorsDestroy: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('visitorsDestroy', 'id', id);
            const localVarPath = `/visitors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitorsShow: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('visitorsShow', 'id', id);
            const localVarPath = `/visitors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {ACRequestBody} aCRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acRequestCreate(aCRequestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.acRequestCreate(aCRequestBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} [requesterId]
         * @param {string} [orderBy]
         * @param {string} [orderDirection]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {ACRequestStatus} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acRequestIndex(requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.acRequestIndex(requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acRequestShow(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.acRequestShow(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} floorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acZonesShow(floorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.acZonesShow(floorId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {WebhookCreateBody} webhookCreateBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(webhookCreateBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.create(webhookCreateBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetch(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetch(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {CreateFSMembersBody} createFSMembersBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationsFsMembersCreate(createFSMembersBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.integrationsFsMembersCreate(createFSMembersBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {DestroyFSMembers} destroyFSMembers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationsFsMembersDelete(destroyFSMembers, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.integrationsFsMembersDelete(destroyFSMembers, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueTypesIndex(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.issueTypesIndex(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsIndex(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.locationsIndex(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} memberId
         * @param {CommandsCreateBody} commandsCreateBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersCommandsCreate(memberId, commandsCreateBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.membersCommandsCreate(memberId, commandsCreateBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} memberId
         * @param {string} [name]
         * @param {string} [orderBy]
         * @param {string} [orderDirection]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersCommandsIndex(memberId, name, orderBy, orderDirection, pageNumber, pageSize, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.membersCommandsIndex(memberId, name, orderBy, orderDirection, pageNumber, pageSize, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} [identifier]
         * @param {string} [accountId]
         * @param {string} [xAccountId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersIndex(identifier, accountId, xAccountId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.membersIndex(identifier, accountId, xAccountId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [locationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersShow(id, locationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.membersShow(id, locationId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {UpdateMemberRequestBody} updateMemberRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersUpdate(id, updateMemberRequestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.membersUpdate(id, updateMemberRequestBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parkingLotsIndex(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.parkingLotsIndex(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {number} memberTypeId
         * @param {number} vehicleTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parkingRedemptionRatesIndex(id, memberTypeId, vehicleTypeId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.parkingRedemptionRatesIndex(id, memberTypeId, vehicleTypeId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {ParkingTicketsIndexTypeEnum} type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parkingTicketsIndex(type, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.parkingTicketsIndex(type, id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} logId
         * @param {ParkingTicketsRedeemBody} parkingTicketsRedeemBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parkingTicketsRedeem(logId, parkingTicketsRedeemBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.parkingTicketsRedeem(logId, parkingTicketsRedeemBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} visitScheduleId
         * @param {ConsentRequestBody} consentRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passesConsent(visitScheduleId, consentRequestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.passesConsent(visitScheduleId, consentRequestBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} visitScheduleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passesShow(visitScheduleId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.passesShow(visitScheduleId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} towerId
         * @param {string} [memberId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsIndex(towerId, memberId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sensorsIndex(towerId, memberId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {ServiceRequestBody} serviceRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceRequestsCreate(serviceRequestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.serviceRequestsCreate(serviceRequestBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} [requesterId]
         * @param {string} [orderBy]
         * @param {string} [orderDirection]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {ServiceRequestStatus} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceRequestsIndex(requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.serviceRequestsIndex(requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceRequestsShow(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.serviceRequestsShow(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {ServiceRequestsUpdateRequestBody} serviceRequestsUpdateRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceRequestsUpdate(id, serviceRequestsUpdateRequestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.serviceRequestsUpdate(id, serviceRequestsUpdateRequestBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {SyncBody} syncBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sync(syncBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sync(syncBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} [tokenId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitorTokensIndex(tokenId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.visitorTokensIndex(tokenId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {CreateVisitorBody} createVisitorBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitorsCreate(createVisitorBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.visitorsCreate(createVisitorBody, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitorsDestroy(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.visitorsDestroy(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitorsShow(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.visitorsShow(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         *
         * @param {ACRequestBody} aCRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acRequestCreate(aCRequestBody, options) {
            return localVarFp.acRequestCreate(aCRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} [requesterId]
         * @param {string} [orderBy]
         * @param {string} [orderDirection]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {ACRequestStatus} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acRequestIndex(requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options) {
            return localVarFp.acRequestIndex(requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acRequestShow(id, options) {
            return localVarFp.acRequestShow(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} floorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acZonesShow(floorId, options) {
            return localVarFp.acZonesShow(floorId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {WebhookCreateBody} webhookCreateBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(webhookCreateBody, options) {
            return localVarFp.create(webhookCreateBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetch(options) {
            return localVarFp.fetch(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CreateFSMembersBody} createFSMembersBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationsFsMembersCreate(createFSMembersBody, options) {
            return localVarFp.integrationsFsMembersCreate(createFSMembersBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {DestroyFSMembers} destroyFSMembers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationsFsMembersDelete(destroyFSMembers, options) {
            return localVarFp.integrationsFsMembersDelete(destroyFSMembers, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueTypesIndex(options) {
            return localVarFp.issueTypesIndex(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsIndex(options) {
            return localVarFp.locationsIndex(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} memberId
         * @param {CommandsCreateBody} commandsCreateBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersCommandsCreate(memberId, commandsCreateBody, options) {
            return localVarFp.membersCommandsCreate(memberId, commandsCreateBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} memberId
         * @param {string} [name]
         * @param {string} [orderBy]
         * @param {string} [orderDirection]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersCommandsIndex(memberId, name, orderBy, orderDirection, pageNumber, pageSize, options) {
            return localVarFp.membersCommandsIndex(memberId, name, orderBy, orderDirection, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} [identifier]
         * @param {string} [accountId]
         * @param {string} [xAccountId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersIndex(identifier, accountId, xAccountId, options) {
            return localVarFp.membersIndex(identifier, accountId, xAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {string} [locationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersShow(id, locationId, options) {
            return localVarFp.membersShow(id, locationId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {UpdateMemberRequestBody} updateMemberRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersUpdate(id, updateMemberRequestBody, options) {
            return localVarFp.membersUpdate(id, updateMemberRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parkingLotsIndex(options) {
            return localVarFp.parkingLotsIndex(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {number} memberTypeId
         * @param {number} vehicleTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parkingRedemptionRatesIndex(id, memberTypeId, vehicleTypeId, options) {
            return localVarFp.parkingRedemptionRatesIndex(id, memberTypeId, vehicleTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ParkingTicketsIndexTypeEnum} type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parkingTicketsIndex(type, id, options) {
            return localVarFp.parkingTicketsIndex(type, id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} logId
         * @param {ParkingTicketsRedeemBody} parkingTicketsRedeemBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parkingTicketsRedeem(logId, parkingTicketsRedeemBody, options) {
            return localVarFp.parkingTicketsRedeem(logId, parkingTicketsRedeemBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} visitScheduleId
         * @param {ConsentRequestBody} consentRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passesConsent(visitScheduleId, consentRequestBody, options) {
            return localVarFp.passesConsent(visitScheduleId, consentRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} visitScheduleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passesShow(visitScheduleId, options) {
            return localVarFp.passesShow(visitScheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} towerId
         * @param {string} [memberId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorsIndex(towerId, memberId, options) {
            return localVarFp.sensorsIndex(towerId, memberId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ServiceRequestBody} serviceRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceRequestsCreate(serviceRequestBody, options) {
            return localVarFp.serviceRequestsCreate(serviceRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} [requesterId]
         * @param {string} [orderBy]
         * @param {string} [orderDirection]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {ServiceRequestStatus} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceRequestsIndex(requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options) {
            return localVarFp.serviceRequestsIndex(requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceRequestsShow(id, options) {
            return localVarFp.serviceRequestsShow(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {ServiceRequestsUpdateRequestBody} serviceRequestsUpdateRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceRequestsUpdate(id, serviceRequestsUpdateRequestBody, options) {
            return localVarFp.serviceRequestsUpdate(id, serviceRequestsUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {SyncBody} syncBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sync(syncBody, options) {
            return localVarFp.sync(syncBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} [tokenId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitorTokensIndex(tokenId, options) {
            return localVarFp.visitorTokensIndex(tokenId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CreateVisitorBody} createVisitorBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitorsCreate(createVisitorBody, options) {
            return localVarFp.visitorsCreate(createVisitorBody, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitorsDestroy(id, options) {
            return localVarFp.visitorsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitorsShow(id, options) {
            return localVarFp.visitorsShow(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     *
     * @param {ACRequestBody} aCRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    acRequestCreate(aCRequestBody, options) {
        return (0, exports.DefaultApiFp)(this.configuration).acRequestCreate(aCRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} [requesterId]
     * @param {string} [orderBy]
     * @param {string} [orderDirection]
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {ACRequestStatus} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    acRequestIndex(requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options) {
        return (0, exports.DefaultApiFp)(this.configuration).acRequestIndex(requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    acRequestShow(id, options) {
        return (0, exports.DefaultApiFp)(this.configuration).acRequestShow(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} floorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    acZonesShow(floorId, options) {
        return (0, exports.DefaultApiFp)(this.configuration).acZonesShow(floorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {WebhookCreateBody} webhookCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    create(webhookCreateBody, options) {
        return (0, exports.DefaultApiFp)(this.configuration).create(webhookCreateBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    fetch(options) {
        return (0, exports.DefaultApiFp)(this.configuration).fetch(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CreateFSMembersBody} createFSMembersBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    integrationsFsMembersCreate(createFSMembersBody, options) {
        return (0, exports.DefaultApiFp)(this.configuration).integrationsFsMembersCreate(createFSMembersBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {DestroyFSMembers} destroyFSMembers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    integrationsFsMembersDelete(destroyFSMembers, options) {
        return (0, exports.DefaultApiFp)(this.configuration).integrationsFsMembersDelete(destroyFSMembers, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    issueTypesIndex(options) {
        return (0, exports.DefaultApiFp)(this.configuration).issueTypesIndex(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    locationsIndex(options) {
        return (0, exports.DefaultApiFp)(this.configuration).locationsIndex(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} memberId
     * @param {CommandsCreateBody} commandsCreateBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    membersCommandsCreate(memberId, commandsCreateBody, options) {
        return (0, exports.DefaultApiFp)(this.configuration).membersCommandsCreate(memberId, commandsCreateBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} memberId
     * @param {string} [name]
     * @param {string} [orderBy]
     * @param {string} [orderDirection]
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    membersCommandsIndex(memberId, name, orderBy, orderDirection, pageNumber, pageSize, options) {
        return (0, exports.DefaultApiFp)(this.configuration).membersCommandsIndex(memberId, name, orderBy, orderDirection, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} [identifier]
     * @param {string} [accountId]
     * @param {string} [xAccountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    membersIndex(identifier, accountId, xAccountId, options) {
        return (0, exports.DefaultApiFp)(this.configuration).membersIndex(identifier, accountId, xAccountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {string} [locationId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    membersShow(id, locationId, options) {
        return (0, exports.DefaultApiFp)(this.configuration).membersShow(id, locationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {UpdateMemberRequestBody} updateMemberRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    membersUpdate(id, updateMemberRequestBody, options) {
        return (0, exports.DefaultApiFp)(this.configuration).membersUpdate(id, updateMemberRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    parkingLotsIndex(options) {
        return (0, exports.DefaultApiFp)(this.configuration).parkingLotsIndex(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {number} memberTypeId
     * @param {number} vehicleTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    parkingRedemptionRatesIndex(id, memberTypeId, vehicleTypeId, options) {
        return (0, exports.DefaultApiFp)(this.configuration).parkingRedemptionRatesIndex(id, memberTypeId, vehicleTypeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ParkingTicketsIndexTypeEnum} type
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    parkingTicketsIndex(type, id, options) {
        return (0, exports.DefaultApiFp)(this.configuration).parkingTicketsIndex(type, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} logId
     * @param {ParkingTicketsRedeemBody} parkingTicketsRedeemBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    parkingTicketsRedeem(logId, parkingTicketsRedeemBody, options) {
        return (0, exports.DefaultApiFp)(this.configuration).parkingTicketsRedeem(logId, parkingTicketsRedeemBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} visitScheduleId
     * @param {ConsentRequestBody} consentRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    passesConsent(visitScheduleId, consentRequestBody, options) {
        return (0, exports.DefaultApiFp)(this.configuration).passesConsent(visitScheduleId, consentRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} visitScheduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    passesShow(visitScheduleId, options) {
        return (0, exports.DefaultApiFp)(this.configuration).passesShow(visitScheduleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} towerId
     * @param {string} [memberId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    sensorsIndex(towerId, memberId, options) {
        return (0, exports.DefaultApiFp)(this.configuration).sensorsIndex(towerId, memberId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ServiceRequestBody} serviceRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    serviceRequestsCreate(serviceRequestBody, options) {
        return (0, exports.DefaultApiFp)(this.configuration).serviceRequestsCreate(serviceRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} [requesterId]
     * @param {string} [orderBy]
     * @param {string} [orderDirection]
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {ServiceRequestStatus} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    serviceRequestsIndex(requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options) {
        return (0, exports.DefaultApiFp)(this.configuration).serviceRequestsIndex(requesterId, orderBy, orderDirection, pageNumber, pageSize, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    serviceRequestsShow(id, options) {
        return (0, exports.DefaultApiFp)(this.configuration).serviceRequestsShow(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {ServiceRequestsUpdateRequestBody} serviceRequestsUpdateRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    serviceRequestsUpdate(id, serviceRequestsUpdateRequestBody, options) {
        return (0, exports.DefaultApiFp)(this.configuration).serviceRequestsUpdate(id, serviceRequestsUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {SyncBody} syncBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    sync(syncBody, options) {
        return (0, exports.DefaultApiFp)(this.configuration).sync(syncBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} [tokenId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    visitorTokensIndex(tokenId, options) {
        return (0, exports.DefaultApiFp)(this.configuration).visitorTokensIndex(tokenId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CreateVisitorBody} createVisitorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    visitorsCreate(createVisitorBody, options) {
        return (0, exports.DefaultApiFp)(this.configuration).visitorsCreate(createVisitorBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    visitorsDestroy(id, options) {
        return (0, exports.DefaultApiFp)(this.configuration).visitorsDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    visitorsShow(id, options) {
        return (0, exports.DefaultApiFp)(this.configuration).visitorsShow(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
/**
 * @export
 */
exports.ParkingTicketsIndexTypeEnum = {
    LogId: 'log_id',
    InviteId: 'invite_id',
    MemberId: 'member_id'
};
